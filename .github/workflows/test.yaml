name: Test Suite for Volcano

on:
  - pull_request

jobs:
  call-inclusive-naming-check:
    name: Inclusive naming
    uses: canonical-web-and-design/Inclusive-naming/.github/workflows/woke.yaml@main
    with:
      fail-on-error: "true"

  lint-unit:
    name: Lint Unit
    uses: charmed-kubernetes/workflows/.github/workflows/lint-unit.yaml@main
    needs:
      - call-inclusive-naming-check
    with:
      python: "['3.10', '3.11']"

  build-charms:
    name: Build Charms
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        charm: 
          - volcano-admission
          - volcano-controllers
          - volcano-scheduler
    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Install and prepare LXD snap environment
      run: |
        sudo apt-get remove -qy lxd lxd-client | true
        sudo snap list lxd | true
        sudo snap install lxd --channel=latest/stable
        sudo snap refresh lxd --channel=latest/stable
        sudo lxd waitready
        sudo lxd init --auto
        sudo chmod a+wr /var/snap/lxd/common/lxd/unix.socket
        sudo lxc network set lxdbr0 ipv6.address none
        sudo usermod -a -G lxd $USER
        sg lxd -c 'lxc version'

    - name: Remove Docker
      run: |
        # https://github.com/canonical/lxd-cloud/blob/f20a64a8af42485440dcbfd370faf14137d2f349/test/includes/lxd.sh#L13-L23
        sudo rm -rf /etc/docker
        sudo apt-get purge moby-buildx moby-engine moby-cli moby-compose moby-containerd moby-runc -y
        sudo iptables -P FORWARD ACCEPT

    - name: Install charmcraft
      run: |
        sudo snap install charmcraft --channel=2.x/stable --classic

    - name: Pack Charm
      run: |
        sudo charmcraft pack -p charms/${{ matrix.charm }}

    - name: Upload charm artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.charm }}
        path: ./*.charm

    - name: Upload debug artifacts
      if: ${{ failure() }}
      uses: actions/upload-artifact@v4
      with:
        name: charmcraft-logs
        path: /home/runner/snap/charmcraft/common/cache/charmcraft/log/charmcraft-*.log


  integration-test:
    name: Integration test
    runs-on: ubuntu-22.04
    timeout-minutes: 60
    needs:
      - lint-unit
      - build-charms
    strategy:
      matrix:
        microk8s: ["1.25-strict/stable"]
        juju: ["3.1/stable"]
    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Setup operator environment
      uses: charmed-kubernetes/actions-operator@main
      with:
        provider: microk8s
        channel: ${{ matrix.microk8s }}
        juju-channel: ${{ matrix.juju }}
    
    - name: Setup MetalLB
      run: |
        sudo microk8s enable metallb:10.64.140.43-10.64.140.49 

    # download each of the above built charms
    - name: Download volcano-admission charm
      uses: actions/download-artifact@v4
      with:
        name: volcano-admission
    - name: Download volcano-controllers charm
      uses: actions/download-artifact@v4
      with:
        name: volcano-controllers
    - name: Download volcano-scheduler charm
      uses: actions/download-artifact@v4
      with:
        name: volcano-scheduler

    - name: Prepare lxc project
      run: lxc --project charmcraft project create local:charmcraft

    - name: Run test
      run: sg snap_microk8s -c "tox -e integration"

    - name: Setup Debug Artifact Collection
      if: ${{ failure() }}
      run: mkdir tmp
    - name: Collect K8s Status
      if: ${{ failure() }}
      run: sudo microk8s.kubectl get all -A 2>&1 | tee tmp/microk8s-status-all.txt
    - name: Collect Juju Status
      if: ${{ failure() }}
      run: sg snap_microk8s -c "juju status 2>&1" | tee tmp/juju-status.txt
    - name: Collect K8s Deployment details
      if: ${{ failure() }}
      run: sudo microk8s.kubectl describe deployments -A 2>&1 | tee tmp/microk8s-deployments.txt
    - name: Collect K8s ReplicaSet details
      if: ${{ failure() }}
      run: sudo microk8s.kubectl describe replicasets -A 2>&1 | tee tmp/microk8s-replicasets.txt
    - name: Collect K8s DaemonSet details
      if: ${{ failure() }}
      run: sudo microk8s.kubectl describe daemonsets -A 2>&1 | tee tmp/microk8s-daemonsets.txt
    - name: Collect K8s pod logs
      if: ${{ failure() }}
      run: |
        ns=$(sudo microk8s.kubectl get namespace | grep test-validation | cut -d' ' -f1)
        for pod in `sudo microk8s.kubectl get pods -n ${ns} | awk '{print$1}' | grep -v NAME`; do
          echo "Pod logs for: $pod"
          echo "----------------------------------"
          sudo microk8s.kubectl logs $pod -n ${ns} 2>&1 | tee tmp/pod-$pod-logs.txt
          echo
          echo
        done
    - name: Collect microk8s snap logs
      if: ${{ failure() }}
      run: sudo snap logs -n 300 microk8s 2>&1 | tee tmp/snap-log-microk8s.txt
    - name: Collect Juju logs for volcano-admission
      if: ${{ failure() }}
      run: sg snap_microk8s -c "juju debug-log --replay --no-tail -i volcano-admission" | tee tmp/unit-volcano-admission-0.log
    - name: Collect Juju logs for volcano-scheduler
      if: ${{ failure() }}
      run: sg snap_microk8s -c "juju debug-log --replay --no-tail -i volcano-scheduler" | tee tmp/unit-volcano-scheduler-0.log
    - name: Collect Juju logs for volcano-controller-manager
      if: ${{ failure() }}
      run: sg snap_microk8s -c "juju debug-log --replay --no-tail -i volcano-controllers" | tee tmp/unit-volcano-controllers-0.log
    - name: Upload debug artifacts
      if: ${{ failure() }}
      uses: actions/upload-artifact@v4
      with:
        name: test-run-artifacts
        path: tmp
